#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Output data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform bool lightOn;

void main(){

    // Light emission properties
    vec3 LightColor = vec3(1, 1, 1);
    float LightPower = 100.0f;  // Reduced overall power for a less harsh light
    
    // Material properties
    vec3 MaterialDiffuseColor = texture( myTextureSampler, UV ).rgb;
    vec3 MaterialAmbientColor = vec3(1.0, 1.0, 1.0) * MaterialDiffuseColor; // Increased ambient
    vec3 MaterialSpecularColor = vec3(1.0, 1.0, 1.0);

    if (!lightOn) {
        color = MaterialAmbientColor;
        return;  // Early exit when light is off
    }
    
    // Distance to the light
    float distance = length( LightPosition_worldspace - Position_worldspace );

    // Normal of the computed fragment, in camera space
    vec3 n = normalize( Normal_cameraspace );
    // Direction of the light (from the fragment to the light)
    vec3 l = normalize( LightDirection_cameraspace );
    float cosTheta = clamp( dot( n, l ), 0, 1 );

    // Eye vector (towards the camera)
    vec3 E = normalize( EyeDirection_cameraspace );
    vec3 R = reflect(-l, n);
    float cosAlpha = clamp( dot( E, R ), 0, 1 );

    // Soften the specular highlight and reduce light falloff
    float specularStrength = 0.2;  // Reduce overall specular contribution
    color = MaterialAmbientColor +
            MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance * distance + 1.0) + // Reduced falloff
            specularStrength * MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha, 2) / (distance * distance + 1.0); // Soften specular highlight
    //color = vec3(UV.x, UV.y, 0.0);  // Debug UV mapping
}
